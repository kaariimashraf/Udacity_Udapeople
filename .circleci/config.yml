version: 2.1
orbs: 
  slack: circleci/slack@4.10.1

commands:
  notify_on_failure:
    description: Notify on slack when a job fails
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
  notify_on_success:
    description: Notify on slack when a job passess
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a WORKFLOW_ID.
    parameters:
       WorkflowID : 
          description: WorkflowID
          default: ${CIRCLE_WORKFLOW_ID:0:7}
          type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
           aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WorkflowID >>
           aws s3 rm s3://udapeople-<< parameters.WorkflowID >> --recursive
           aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.WorkflowID >>

  install-awscli:
        description: Install aws cli
        steps:
          - run:
              name: Install aws cli
              command:  |
                sudo apt install unzip
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
  install-ansible:
        description: Install Ansible
        steps:
          - run:
              name: Install Ansible
              command:  |
                 sudo apt update
                 sudo apt install software-properties-common
                 sudo add-apt-repository --yes --update ppa:ansible/ansible
                 sudo apt install ansible


jobs:
  build-frontend:
        docker:
          - image: cimg/node:13.8.0
        steps:
          - checkout
          - restore_cache:
                keys: [frontend-build]
          -  run: 
              name: build frontend
              command: |
                cd frontend
                npm install
                npm run build  
          - save_cache:
              paths: [frontend/node_modules]
              key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name:  build backend
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

          
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name:  test backend
          command: |
             cd backend
             npm install
             npm run test

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name:  test frontend
          command: |
             cd frontend
             npm install
             npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name:  scan frontend
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name:  scan backend
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image : amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                BACKEND_PRIVATE_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PrivateIpAddress' \
                --output text)
                BACKEND_PUBLIC_IP=$(aws ec2 describe-addresses \
                --filters "Name=private-ip-address,Values=$BACKEND_PRIVATE_IP" \
                --query 'Addresses[*].PublicIp' \
                --output text)
                echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
                cat  $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt          
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run : exit 1
      - destroy-environment 
      
workflows:
  myworkflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
            requires:
              - build-frontend
      - test-backend:
            requires:
              - build-backend
      - scan-frontend:
            requires:
              - build-frontend
      - scan-backend:
            requires:
              - build-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]

  